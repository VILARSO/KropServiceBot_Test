import os
import asyncio
import logging
import re
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook
from aiogram.utils.exceptions import BadRequest, TelegramAPIError, MessageNotModified, MessageToDeleteNotFound

import motor.motor_asyncio
from motor.core import AgnosticClient, AgnosticDatabase
from pymongo import DESCENDING, ASCENDING, ReturnDocument

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤ –±–æ—Ç–∞
from config import (
    API_TOKEN, MONGO_DB_URL, WEBHOOK_HOST, WEBHOOK_PATH,
    WEBAPP_HOST, WEBAPP_PORT, POST_LIFETIME_DAYS,
    MY_POSTS_PER_PAGE, VIEW_POSTS_PER_PAGE,
    CATEGORIES, TYPE_EMOJIS
)
from states import AppStates
from keyboards import (
    main_kb, categories_kb, search_type_kb,
    confirm_add_post_kb, post_actions_kb,
    edit_post_kb, pagination_kb,
    confirm_delete_kb, back_kb,
    type_kb, contact_kb
)

from utils import (
    escape_markdown_v2,
    update_or_send_interface_message,
    can_edit,
    get_next_sequence_value
)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logging.getLogger().addHandler(logging.StreamHandler())

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

db_client: AgnosticClient = None
db: AgnosticDatabase = None

async def init_db_connection():
    global db_client, db
    try:
        logging.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB...")
        db_client = motor.motor_asyncio.AsyncIOMotorClient(MONGO_DB_URL)
        db = db_client.cropservice_db  # –Ω–∞–∑–≤–∞ –≤–∞—à–æ—ó –±–∞–∑–∏
        logging.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

        await db.posts.create_index("created_at", expireAfterSeconds=int(POST_LIFETIME_DAYS * 24 * 60 * 60))
        await db.posts.create_index([("category", 1), ("created_at", DESCENDING)])
        await db.posts.create_index([("user_id", 1), ("created_at", DESCENDING)])
        await db.posts.create_index("id", unique=True)
        await db.counters.create_index("_id")

    except Exception as e:
        logging.critical(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤: {e}", exc_info=True)
        exit(1)


WELCOME_MESSAGE = (
    "üëã –ü—Ä–∏–≤—ñ—Ç\\! –Ø CropServiceBot ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—é –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø—ñ–¥—Ä–æ–±—ñ—Ç–∫–∏ –∞–±–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ —É —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ\\.\n\n"
    "‚ûï \\‚Äî –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
    "üîç \\‚Äî –ü–æ—à—É–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å\n"
    "üóÇÔ∏è \\‚Äî –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
    "‚ùì \\‚Äî –î–æ–ø–æ–º–æ–≥–∞"
)

async def go_to_main_menu(bot_obj: Bot, chat_id: int, state: FSMContext):
    await update_or_send_interface_message(
        bot_obj, chat_id, state,
        WELCOME_MESSAGE,
        main_kb(),
        parse_mode='MarkdownV2'
    )
    await state.set_state(AppStates.MAIN_MENU)

async def show_view_posts_page(bot_obj: Bot, chat_id: int, state: FSMContext, offset: int = 0):
    logging.info(f"Showing view posts page for user {chat_id}, offset {offset}")
    try:
        data = await state.get_data()
        cat = data.get('current_view_category')
        if not cat:
            return await go_to_main_menu(bot_obj, chat_id, state)

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø–∏—Ç—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ç–∏–ø—É
        count_query = {'category': cat}
        if data.get('search_type'):
            count_query['type'] = data['search_type']

        total_posts = await db.posts.count_documents(count_query)
        posts_cursor = db.posts.find(count_query) \
                                .sort([('created_at', DESCENDING)]) \
                                .skip(offset) \
                                .limit(VIEW_POSTS_PER_PAGE)
        page_posts = await posts_cursor.to_list(length=VIEW_POSTS_PER_PAGE)

        if not page_posts:
            kb = InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="go_back_to_prev_step"),
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="go_back_to_main_menu")
            )
            text_to_send = f"–£ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ¬´{escape_markdown_v2(cat)}¬ª –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –æ–≥–æ–ª–æ—à–µ–Ω—å\\."
            return await update_or_send_interface_message(
                bot_obj, chat_id, state,
                text_to_send, kb,
                parse_mode='MarkdownV2'
            )

        await state.update_data(offset=offset)
        total_pages = (total_posts + VIEW_POSTS_PER_PAGE - 1) // VIEW_POSTS_PER_PAGE
        current_page = offset // VIEW_POSTS_PER_PAGE + 1

        full_text = (
            f"üìã **{escape_markdown_v2(cat)}** "
            f"\\(–°—Ç–æ—Ä—ñ–Ω–∫–∞ {escape_markdown_v2(current_page)}/{escape_markdown_v2(total_pages)}\\)\n\n"
        )
        combined_keyboard = pagination_kb(
            total_posts, offset, VIEW_POSTS_PER_PAGE,
            'viewpage', cat
        )

        for i, p in enumerate(page_posts):
            type_emoji = TYPE_EMOJIS.get(p['type'], '')
            post_block = (
                f"ID: {escape_markdown_v2(p['id'])}\n"
                f"{type_emoji} **{escape_markdown_v2(p['type'].capitalize())}**\n"
                f"üîπ {escape_markdown_v2(p['description'])}\n"
            )
            if p['username']:
                if p['username'].isdigit():
                    post_block += "üë§ –ê–≤—Ç–æ—Ä: \\_–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\\_\n"
                else:
                    post_block += f"üë§ –ê–≤—Ç–æ—Ä: \\@{escape_markdown_v2(p['username'])}\n"
            if p.get('contacts'):
                post_block += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {escape_markdown_v2(p['contacts'])}\n"

            full_text += post_block
            if i < len(page_posts) - 1:
                full_text += "\n‚Äî\n\n"

        await update_or_send_interface_message(
            bot_obj, chat_id, state,
            full_text, combined_keyboard,
            parse_mode='MarkdownV2',
            disable_web_page_preview=True
        )

    except Exception as e:
        logging.error(f"Error in show_view_posts_page for user {chat_id}: {e}", exc_info=True)
        await update_or_send_interface_message(
            bot_obj, chat_id, state,
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.",
            main_kb(),
            parse_mode='MarkdownV2'
        )
        await state.set_state(AppStates.MAIN_MENU)


async def show_my_posts_page(bot_obj: Bot, chat_id: int, state: FSMContext, offset: int = 0):
    # (–∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω)
    ...


# ======== –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ========
@dp.message_handler(commands=['start'], state="*")
async def on_start(msg: types.Message, state: FSMContext):
    # (–∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω)
    ...


@dp.callback_query_handler(lambda c: c.data == 'go_back_to_main_menu', state='*')
async def on_back_to_main(call: CallbackQuery, state: FSMContext):
    # (–∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω)
    ...


@dp.callback_query_handler(lambda c: c.data == 'go_back_to_prev_step', state='*')
async def on_back_to_prev_step(call: CallbackQuery, state: FSMContext):
    # (–∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω)
    ...


@dp.callback_query_handler(lambda c: c.data == 'add_post', state="*")
async def add_start(call: CallbackQuery, state: FSMContext):
    # (–∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω)
    ...


# ‚Ä¶ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è ‚Ä¶

# ======== –ü–µ—Ä–µ–≥–ª—è–¥ –æ–≥–æ–ª–æ—à–µ–Ω—å ========
@dp.callback_query_handler(lambda c: c.data == 'view_posts', state="*")
async def view_start(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} initiated 'View Posts'.")
    await call.answer()
    # –∫—Ä–æ–∫ 1: –æ–±–∏—Ä–∞—î–º–æ —Ç–∏–ø
    await update_or_send_interface_message(
        call.message.bot, call.message.chat.id, state,
        "üîé –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –ø–æ—à—É–∫—É:",
        search_type_kb()
    )
    await state.set_state(AppStates.SEARCH_TYPE)

@dp.callback_query_handler(lambda c: c.data.startswith('search_type:'), state=AppStates.SEARCH_TYPE)
async def process_search_type(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} selected search type: {call.data}.")
    await call.answer()
    type_value = call.data.split(':')[1]  # 'job' –∞–±–æ 'service'
    await state.update_data(search_type=type_value)
    # –∫—Ä–æ–∫ 2: –æ–±–∏—Ä–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
    await update_or_send_interface_message(
        call.message.bot, call.message.chat.id, state,
        f"–¢–∏–ø ¬´{'–†–æ–±–æ—Ç–∞' if type_value=='job' else '–ü–æ—Å–ª—É–≥–∞'}¬ª –æ–±—Ä–∞–Ω–æ.\nüîé –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
        categories_kb(is_post_creation=False)
    )
    await state.set_state(AppStates.VIEW_CAT)

@dp.callback_query_handler(lambda c: c.data.startswith('view_cat_'), state=AppStates.VIEW_CAT)
async def view_cat(call: CallbackQuery, state: FSMContext):
    idx = int(call.data.split('_')[2])
    cat_name = CATEGORIES[idx][1]
    logging.info(f"User {call.from_user.id} selected view category: {cat_name}.")
    await call.answer()
    await state.update_data(current_view_category=cat_name, current_category_idx=idx)
    await show_view_posts_page(call.message.bot, call.message.chat.id, state, 0)
    await state.set_state(AppStates.VIEW_LISTING)

@dp.callback_query_handler(lambda c: c.data.startswith('viewpage_'), state=AppStates.VIEW_LISTING)
async def view_paginate(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} paginating view posts to offset {call.data.split('_')[1]}.")
    await call.answer()
    offset = int(call.data.split('_')[1])
    await show_view_posts_page(call.message.bot, call.message.chat.id, state, offset)


# ======== –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ========
@dp.callback_query_handler(lambda c: c.data=='my_posts', state="*")
async def my_posts_start(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} pressed 'My Posts'.")
    await call.answer()
    await show_my_posts_page(call.message.bot, call.message.chat.id, state, 0)
    await state.set_state(AppStates.MY_POSTS_VIEW)

@dp.callback_query_handler(lambda c: c.data.startswith('mypage_'), state=AppStates.MY_POSTS_VIEW)
async def my_posts_paginate(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} paginating my posts to offset {call.data.split('_')[1]}.")
    await call.answer()
    offset = int(call.data.split('_')[1])
    await show_my_posts_page(call.message.bot, call.message.chat.id, state, offset)


# ======== –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ========
@dp.callback_query_handler(lambda c: c.data.startswith('edit_'), state=AppStates.MY_POSTS_VIEW)
async def edit_start(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} initiated edit for post {call.data.split('_')[1]}.")
    await call.answer()
    pid = int(call.data.split('_')[1])
    
    post = await db.posts.find_one({'id': pid, 'user_id': call.from_user.id})
    
    if not post or not can_edit(post):
        logging.warning(f"User {call.from_user.id} tried to edit expired or non-existent/unauthorized post {pid}.")
        await call.answer("‚è∞ –ß–∞—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (15 —Ö–≤) –≤–∏—á–µ—Ä–ø–∞–Ω–æ, –∞–±–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ/–Ω–∞–ª–µ–∂–∏—Ç—å —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.\\.", show_alert=True) 
        return
        
    await state.update_data(edit_pid=pid)
    
    await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å (–¥–æ 500 —Å–∏–º–≤–æ–ª—ñ–≤):", back_kb())
    await state.set_state(AppStates.EDIT_DESC)

@dp.message_handler(state=AppStates.EDIT_DESC)
async def process_edit(msg: types.Message, state: FSMContext):
    logging.info(f"User {msg.from_user.id} submitting new description for edit.")
    text = msg.text.strip()
    
    try:
        await msg.delete()
    except MessageToDeleteNotFound:
        pass

    if not text or len(text) > 500:
        return await update_or_send_interface_message(msg.bot, msg.chat.id, state, f"‚ùå –ù–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∏–π –æ–ø–∏—Å \\(1\\-500 —Å–∏–º–≤–æ–ª—ñ–≤\\)\\.", back_kb(), parse_mode='MarkdownV2') 
        
    data = await state.get_data()
    pid = data['edit_pid']
    
    try:
        result = await db.posts.update_one(
            {'id': pid, 'user_id': msg.from_user.id}, 
            {'$set': {'description': text}}
        )
        if result.matched_count == 0:
            logging.warning(f"No post found to update for user {msg.from_user.id}, post {pid}")
            await update_or_send_interface_message(msg.bot, msg.chat.id, state, "‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –π–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è\\.", main_kb(), parse_mode='MarkdownV2')
            await state.set_state(AppStates.MAIN_MENU)
            return
        logging.info(f"Edited post {pid} in MongoDB for user {msg.from_user.id}")
    except Exception as e:
        logging.error(f"Failed to update post in MongoDB: {e}", exc_info=True)
        await update_or_send_interface_message(msg.bot, msg.chat.id, state, "‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–ø–∏—Å—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.", main_kb(), parse_mode='MarkdownV2')
        await state.set_state(AppStates.MAIN_MENU)
        return

    await update_or_send_interface_message(msg.bot, msg.chat.id, state, "‚úÖ –û–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ\\!", parse_mode='MarkdownV2')
    await show_my_posts_page(msg.bot, msg.chat.id, state, data.get('offset', 0))
    await state.set_state(AppStates.MY_POSTS_VIEW)


# ======== –í–∏–¥–∞–ª–µ–Ω–Ω—è ========
@dp.callback_query_handler(lambda c: c.data.startswith('delete_'), state=AppStates.MY_POSTS_VIEW)
async def delete_post(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} initiating delete for post {call.data.split('_')[1]}.")
    
    pid = int(call.data.split('_')[1])
    
    try:
        result = await db.posts.delete_one({'id': pid, 'user_id': call.from_user.id})
        
        if result.deleted_count == 0:
            logging.warning(f"User {call.from_user.id} tried to delete non-existent or unauthorized post {pid}.")
            await call.answer("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –π–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True)
            await show_my_posts_page(call.message.bot, call.message.chat.id, state, (await state.get_data()).get('offset', 0))
            return

        logging.info(f"Deleted post {pid} from MongoDB for user {call.from_user.id}")
        await call.answer("‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.", show_alert=True)
    except Exception as e:
        logging.error(f"Failed to delete post from MongoDB: {e}", exc_info=True)
        await call.answer("‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.", show_alert=True)
        await show_my_posts_page(call.message.bot, call.message.chat.id, state, (await state.get_data()).get('offset', 0))
        return
    
    data = await state.get_data()
    current_offset = data.get('offset', 0)
    
    total_user_posts_after_delete = await db.posts.count_documents({'user_id': call.from_user.id})
    
    new_offset = current_offset
    
    if new_offset >= total_user_posts_after_delete and new_offset > 0:
        new_offset = max(0, new_offset - MY_POSTS_PER_PAGE)
    
    await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, "üóëÔ∏è –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ\\!", parse_mode='MarkdownV2')
    await show_my_posts_page(call.message.bot, call.message.chat.id, state, new_offset)
    await state.set_state(AppStates.MY_POSTS_VIEW)


# ======== –î–æ–ø–æ–º–æ–≥–∞ ========
@dp.callback_query_handler(lambda c: c.data=='help', state="*")
async def help_handler(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} requested help.")
    await call.answer()
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ @VILARSO18", url="https://t.me/VILARSO18"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_main_menu"))
    await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, "üí¨ –î–ª—è —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ –∞–±–æ –¥–æ–ø–æ–º–æ–≥–∏ –ø–∏—à—ñ—Ç—å \\@VILARSO18", kb, parse_mode='MarkdownV2') 
    await state.set_state(AppStates.MAIN_MENU) 

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö callback_data —Ç–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∫–∏–Ω—É—Ç–æ–≥–æ —Å—Ç–∞–Ω—É
# –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ –º–∞—î –±—É—Ç–∏ –ü–Ü–°–õ–Ø –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö callback_query_handler-—ñ–≤
@dp.callback_query_handler(state="*")
async def debug_all_callbacks(call: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"DEBUG: Unhandled callback_data received: {call.data} from user {call.from_user.id} in state {current_state}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ None (—Å–µ—Å—ñ—è —Å–∫–∏–Ω—É—Ç–∞)
    if current_state is None:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ callback_data —Å—Ö–æ–∂–∞ –Ω–∞ —Ç—É, —â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è –≤ –ø–µ–≤–Ω–∏—Ö —Å—Ç–∞–Ω–∞—Ö
        sub_menu_callbacks = [
            'type_', 'post_cat_', 'view_cat_', 'viewpage_', 'mypage_',
            'edit_', 'delete_', 'skip_cont', 'confirm_add_post', 'cancel_add_post', 'confirm_delete_', 'cancel_delete_'
        ]
        
        is_sub_menu_callback = any(call.data.startswith(prefix) for prefix in sub_menu_callbacks)

        if is_sub_menu_callback:
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            try:
                await call.message.delete()
                logging.info(f"Deleted old message {call.message.message_id} for user {call.from_user.id} due to session reset.")
            except MessageToDeleteNotFound:
                logging.warning(f"Message {call.message.message_id} not found to delete for user {call.from_user.id}.")
            except Exception as e:
                logging.error(f"Error deleting message {call.message.message_id} for user {call.from_user.id}: {e}", exc_info=True)

            await call.answer("–í–∞—à–∞ —Å–µ—Å—ñ—è –±—É–ª–∞ —Å–∫–∏–Ω—É—Ç–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", show_alert=True)
            await go_to_main_menu(call.message.bot, call.message.chat.id, state)
            return # –í–∞–∂–ª–∏–≤–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏

    await call.answer() # –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback_query, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ "–∫—Ä—É—Ç—è—á–æ–≥–æ—Å—è –≥–æ–¥–∏–Ω–Ω–∏–∫–∞"

# ======== –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–º–∏–ª–æ–∫ ========
@dp.errors_handler()
async def err_handler(update: types.Update, exception):
    logging.error(f"Update: {update} caused error: {exception}", exc_info=True)
    
    chat_id = None
    bot_obj = None
    if update.callback_query and update.callback_query.message:
        chat_id = update.callback_query.message.chat.id
        bot_obj = update.callback_query.message.bot
    elif update.message:
        chat_id = update.message.chat.id
        bot_obj = update.message.bot

    if chat_id and bot_obj:
        if isinstance(exception, (BadRequest, TelegramAPIError)):
            if "Can't parse entities" in str(exception):
                logging.error("Markdown parse error detected. Ensure all user-supplied text is escaped.")
                await update_or_send_interface_message(bot_obj, chat_id, dp.current_state(), "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Ç–µ–∫—Å—Ç—É\\. –ú–æ–∂–ª–∏–≤–æ, –≤ –æ–ø–∏—Å—ñ —î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Å–∏–º–≤–æ–ª–∏\\.", main_kb(), parse_mode='MarkdownV2')
                await dp.current_state().set_state(AppStates.MAIN_MENU)
                return True
            elif "Text must be non-empty" in str(exception):
                logging.error("Message text is empty error detected.")
                await update_or_send_interface_message(bot_obj, chat_id, dp.current_state(), "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.", main_kb())
                await dp.current_state().set_state(AppStates.MAIN_MENU)
                return True
            elif "message is not modified" in str(exception): 
                logging.info("Message was not modified, skipping update.")
                return True 
            elif "Too Many Requests: retry after" in str(exception):
                retry_after = int(re.search(r'retry after (\d+)', str(exception)).group(1))
                logging.warning(f"FloodWait for {retry_after} seconds for chat {chat_id}")
                await update_or_send_interface_message(bot_obj, chat_id, dp.current_state(), f"–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤\\. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ {retry_after} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –¥—ñ—î—é\\.", main_kb(), parse_mode='MarkdownV2')
                await dp.current_state().set_state(AppStates.MAIN_MENU)
                return True
        elif isinstance(exception, MessageNotModified):
            logging.info("Message was not modified, skipping update.")
            return True
        elif isinstance(exception, MessageToDeleteNotFound):
            logging.info("Message to delete not found, skipping.")
            return True

    logging.critical(f"Unhandled error: {exception}", exc_info=True)
    if chat_id and bot_obj:
        await update_or_send_interface_message(bot_obj, chat_id, dp.current_state(), "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\.", main_kb())
        await dp.current_state().set_state(AppStates.MAIN_MENU)
    return True

async def on_startup(dp_obj):
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await init_db_connection()

    WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
    
    # –Ø–≤–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ
    try:
        await bot.delete_webhook()
        logging.info("–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ–±—Ö—É–∫ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ–±—Ö—É–∫ (–º–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –Ω–µ –±—É–ª–æ): {e}")
    
    # –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –ø–∞—É–∑—É
    await asyncio.sleep(1)

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π –≤–µ–±—Ö—É–∫, —Å–∫–∏–¥–∞—é—á–∏ –≤—Å—ñ –æ—á—ñ–∫—É—é—á—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    logging.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤–µ–±—Ö—É–∫–∞ –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
    try:
        webhook_info = await bot.get_webhook_info()
        logging.info(f"DEBUG: Webhook info after setup: {webhook_info}")
    except Exception as e:
        logging.error(f"DEBUG: Failed to get webhook info after setup: {e}", exc_info=True)


async def on_shutdown(dp_obj):
    logging.info("–í–∏–º–∫–Ω–µ–Ω–Ω—è –±–æ—Ç–∞...")
    await bot.delete_webhook()
    logging.info("–í–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    global db_client
    if db_client:
        db_client.close()
        logging.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB –∑–∞–∫—Ä–∏—Ç–æ.")

if __name__ == '__main__':
    logging.info("Starting webhook...")
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
