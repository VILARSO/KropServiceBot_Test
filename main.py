import os
import asyncio
import logging
import re
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook
from aiogram.utils.exceptions import BadRequest, TelegramAPIError, MessageNotModified, MessageToDeleteNotFound

import motor.motor_asyncio
from motor.core import AgnosticClient, AgnosticDatabase
from pymongo import DESCENDING, ASCENDING, ReturnDocument

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤ –±–æ—Ç–∞
from config import API_TOKEN, MONGO_DB_URL, WEBHOOK_HOST, WEBHOOK_PATH, WEBAPP_HOST, WEBAPP_PORT, POST_LIFETIME_DAYS, MY_POSTS_PER_PAGE, VIEW_POSTS_PER_PAGE, CATEGORIES, TYPE_EMOJIS
from states import AppStates
from keyboards import main_kb, categories_kb, confirm_add_post_kb, post_actions_kb, edit_post_kb, pagination_kb, confirm_delete_kb, back_kb, type_kb, contact_kb

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ update_or_send_interface_message, can_edit, get_next_sequence_value –∑ utils
from utils import escape_markdown_v2, update_or_send_interface_message, can_edit, get_next_sequence_value

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logging.getLogger().addHandler(logging.StreamHandler())

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db_client: AgnosticClient = None
db: AgnosticDatabase = None

# ======== –§—É–Ω–∫—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ñ –∑ main.py –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏) ========
async def init_db_connection():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏."""
    global db_client, db
    try:
        logging.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB...")
        db_client = motor.motor_asyncio.AsyncIOMotorClient(MONGO_DB_URL)
        db = db_client.cropservice_db # –ù–∞–∑–≤–∞ –≤–∞—à–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        logging.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤
        # TTL —ñ–Ω–¥–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
        await db.posts.create_index("created_at", expireAfterSeconds=int(POST_LIFETIME_DAYS * 24 * 60 * 60))
        logging.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ TTL —ñ–Ω–¥–µ–∫—Å –Ω–∞ 'created_at' –¥–ª—è –∫–æ–ª–µ–∫—Ü—ñ—ó 'posts' –∑ —Ç–µ—Ä–º—ñ–Ω–æ–º –¥—ñ—ó {POST_LIFETIME_DAYS} –¥–Ω—ñ–≤.")

        # –°–∫–ª–∞–¥–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—É–±–ª—ñ—á–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
        await db.posts.create_index([("category", 1), ("created_at", DESCENDING)])
        logging.info("–°—Ç–≤–æ—Ä–µ–Ω–æ —Å–∫–ª–∞–¥–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ '(category, created_at)' –¥–ª—è –∫–æ–ª–µ–∫—Ü—ñ—ó 'posts'.")

        # –°–∫–ª–∞–¥–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É '–ú–æ—ó—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å'
        await db.posts.create_index([("user_id", 1), ("created_at", DESCENDING)])
        logging.info("–°—Ç–≤–æ—Ä–µ–Ω–æ —Å–∫–ª–∞–¥–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ '(user_id, created_at)' –¥–ª—è –∫–æ–ª–µ–∫—Ü—ñ—ó 'posts'.")

        # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
        await db.posts.create_index("id", unique=True)
        logging.info("–°—Ç–≤–æ—Ä–µ–Ω–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ 'id' –¥–ª—è –∫–æ–ª–µ–∫—Ü—ñ—ó 'posts'.")

        # –Ü–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ–ª–µ–∫—Ü—ñ—ó –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ _id)
        await db.counters.create_index("_id")
        logging.info("–°—Ç–≤–æ—Ä–µ–Ω–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ '_id' –¥–ª—è –∫–æ–ª–µ–∫—Ü—ñ—ó 'counters'.")

    except Exception as e:
        logging.critical(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤: {e}", exc_info=True)
        exit(1)

# ======== –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –º—ñ–∂ —Å—Ç–∞–Ω–∞–º–∏ ========
WELCOME_MESSAGE = (
    "üëã –ü—Ä–∏–≤—ñ—Ç\\! –Ø CropServiceBot ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—é –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø—ñ–¥—Ä–æ–±—ñ—Ç–∫–∏ –∞–±–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ —É —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ\\.\n\n"
    "‚ûï \\‚Äî –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
    "üîç \\‚Äî –ü–æ—à—É–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å\n"
    "üóÇÔ∏è \\‚Äî –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
    "‚ùì \\‚Äî –î–æ–ø–æ–º–æ–≥–∞"
)

async def go_to_main_menu(bot_obj: Bot, chat_id: int, state: FSMContext):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, –æ–Ω–æ–≤–ª—é—é—á–∏ —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    logging.info(f"User {chat_id} going to main menu.")
    await update_or_send_interface_message(bot_obj, chat_id, state, WELCOME_MESSAGE, main_kb(), parse_mode='MarkdownV2')
    await state.set_state(AppStates.MAIN_MENU)

async def show_view_posts_page(bot_obj: Bot, chat_id: int, state: FSMContext, offset: int = 0):
    logging.info(f"Showing view posts page for user {chat_id}, offset {offset}")
    try:
        data = await state.get_data()
        cat = data.get('current_view_category')

        if not cat:
            logging.error(f"Category not found in state for user {chat_id}")
            return await go_to_main_menu(bot_obj, chat_id, state)

        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        total_posts = await db.posts.count_documents({'category': cat})
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ MongoDB –∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
        posts_cursor = db.posts.find(
            {'category': cat}
        ).sort([('created_at', DESCENDING)]).skip(offset).limit(VIEW_POSTS_PER_PAGE)
        
        page_posts = await posts_cursor.to_list(length=VIEW_POSTS_PER_PAGE)

        if not page_posts: 
            logging.info(f"No posts found for category '{cat}' for user {chat_id}")
            kb = InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="go_back_to_prev_step"),
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="go_back_to_main_menu")
            )
            text_to_send = f"–£ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ¬´{escape_markdown_v2(cat)}¬ª –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –æ–≥–æ–ª–æ—à–µ–Ω—å\\."
            return await update_or_send_interface_message(
                bot_obj, chat_id, state,
                text_to_send,
                kb, parse_mode='MarkdownV2'
            )

        await state.update_data(offset=offset)
        
        total_pages = (total_posts + VIEW_POSTS_PER_PAGE - 1) // VIEW_POSTS_PER_PAGE
        current_page = offset // VIEW_POSTS_PER_PAGE + 1
        
        full_text = (f"üìã **{escape_markdown_v2(cat)}** \\(–°—Ç–æ—Ä—ñ–Ω–∫–∞ {escape_markdown_v2(current_page)}/{escape_markdown_v2(total_pages)}\\)\n\n")
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ pagination_kb –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        combined_keyboard = pagination_kb(total_posts, offset, VIEW_POSTS_PER_PAGE, 'viewpage', cat)

        for i, p in enumerate(page_posts):
            type_emoji = TYPE_EMOJIS.get(p['type'], '') 
            
            post_block = (f"ID: {escape_markdown_v2(p['id'])}\n"
                         f"{escape_markdown_v2(type_emoji)} **{escape_markdown_v2(p['type'].capitalize())}**\n"
                         f"üîπ {escape_markdown_v2(p['description'])}\n") 
            
            if p['username']:
                if p['username'].isdigit():
                    post_block += f"üë§ –ê–≤—Ç–æ—Ä: \\_–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\\_\n"
                else:
                    post_block += f"üë§ –ê–≤—Ç–æ—Ä: \\@{escape_markdown_v2(p['username'])}\n"
            
            contact_info = p.get('contacts', '')
            if contact_info:
                post_block += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {escape_markdown_v2(contact_info)}\n"
            
            full_text += post_block
            
            if i < len(page_posts) - 1:
                full_text += "\n‚Äî\n\n" 
        
        await update_or_send_interface_message(bot_obj, chat_id, state, full_text, combined_keyboard, parse_mode='MarkdownV2', disable_web_page_preview=True)

    except Exception as e:
        logging.error(f"Error in show_view_posts_page for user {chat_id}: {e}", exc_info=True)
        await update_or_send_interface_message(bot_obj, chat_id, state, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.", main_kb(), parse_mode='MarkdownV2')
        await state.set_state(AppStates.MAIN_MENU)

async def show_my_posts_page(bot_obj: Bot, chat_id: int, state: FSMContext, offset: int = 0):
    logging.info(f"Showing my posts page for user {chat_id}, offset {offset}")
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        total_posts = await db.posts.count_documents({'user_id': chat_id})

        if total_posts == 0:
            logging.info(f"No posts found for user {chat_id}")
            kb_no_posts = InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", callback_data="add_post"), 
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="go_back_to_main_menu")
            )
            return await update_or_send_interface_message(bot_obj, chat_id, state, "üßê –£ –≤–∞—Å –Ω–µ–º–∞—î –æ–≥–æ–ª–æ—à–µ–Ω—å\\.", kb_no_posts, parse_mode='MarkdownV2')

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ MongoDB, —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é —Ç–∞ –ø–∞–≥—ñ–Ω—É—î–º–æ
        user_posts_cursor = db.posts.find(
            {'user_id': chat_id}
        ).sort([('created_at', DESCENDING)]).skip(offset).limit(MY_POSTS_PER_PAGE)
        
        page_posts = await user_posts_cursor.to_list(length=MY_POSTS_PER_PAGE)
        
        await state.update_data(offset=offset)

        total_pages = (total_posts + MY_POSTS_PER_PAGE - 1) // MY_POSTS_PER_PAGE
        current_page = offset // MY_POSTS_PER_PAGE + 1
        
        full_text = f"üóÇÔ∏è **–ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è** \\(–°—Ç–æ—Ä—ñ–Ω–∫–∞ {escape_markdown_v2(current_page)}/{escape_markdown_v2(total_pages)}\\)\n\n"
        
        combined_keyboard = InlineKeyboardMarkup(row_width=2) 

        for i, p in enumerate(page_posts):
            type_emoji = TYPE_EMOJIS.get(p['type'], '') 
            
            local_post_num = offset + i + 1
            
            post_block = (f"‚Ññ {escape_markdown_v2(local_post_num)}\n" 
                         f"ID: {escape_markdown_v2(p['id'])}\n"
                         f"{escape_markdown_v2(type_emoji)} **{escape_markdown_v2(p['type'].capitalize())}**\n"
                         f"üîπ {escape_markdown_v2(p['description'])}\n")
            
            if p['username']:
                if p['username'].isdigit():
                    post_block += f"üë§ –ê–≤—Ç–æ—Ä: \\_–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\\_\n"
                else:
                    post_block += f"üë§ –ê–≤—Ç–æ—Ä: \\@{escape_markdown_v2(p['username'])}\n"
            
            if p.get('contacts'):
                 post_block += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {escape_markdown_v2(p['contacts'])}\n"
            
            full_text += post_block
            
            post_kb_row = []
            if can_edit(p):
                post_kb_row.append(InlineKeyboardButton(f"‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚Ññ {local_post_num}", callback_data=f"edit_{p['id']}")) 
            post_kb_row.append(InlineKeyboardButton(f"üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ ‚Ññ {local_post_num}", callback_data=f"delete_{p['id']}")) 
            
            combined_keyboard.row(*post_kb_row)

            if i < len(page_posts) - 1:
                full_text += "\n‚Äî\n\n"

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ pagination_kb –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        nav_keyboard = pagination_kb(total_posts, offset, MY_POSTS_PER_PAGE, 'mypage', str(chat_id))
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–æ –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        for row in nav_keyboard.inline_keyboard:
            combined_keyboard.add(*row)
            
        await update_or_send_interface_message(bot_obj, chat_id, state, full_text, combined_keyboard, parse_mode='MarkdownV2', disable_web_page_preview=True)


    except Exception as e:
        logging.error(f"Error in show_my_posts_page for user {chat_id}: {e}", exc_info=True)
        await update_or_send_interface_message(bot_obj, chat_id, state, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∞—à–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.", main_kb(), parse_mode='MarkdownV2')
        await state.set_state(AppStates.MAIN_MENU)

# ======== –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ========
@dp.message_handler(commands=['start'], state="*")
async def on_start(msg: types.Message, state: FSMContext):
    logging.info(f"User {msg.from_user.id} started bot.")
    logging.info(f"DEBUG: on_start handler triggered for user {msg.from_user.id}")
    
    try:
        await msg.delete() 
    except MessageToDeleteNotFound:
        pass
    except Exception as e:
        logging.warning(f"Failed to delete /start command: {e}")
    
    await state.update_data(last_bot_message_id=None)
    await go_to_main_menu(msg.bot, msg.chat.id, state)


@dp.callback_query_handler(lambda c: c.data == 'go_back_to_main_menu', state='*')
async def on_back_to_main(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} pressed 'Go Back to Main Menu'.")
    await call.answer()
    await go_to_main_menu(call.message.bot, call.message.chat.id, state)


@dp.callback_query_handler(lambda c: c.data == 'go_back_to_prev_step', state='*')
async def on_back_to_prev_step(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} pressed 'Go Back to Previous Step'.")
    await call.answer()
    current_state = await state.get_state()
    chat_id = call.message.chat.id
    bot_obj = call.message.bot
    
    if current_state == AppStates.ADD_TYPE.state:
        await go_to_main_menu(bot_obj, chat_id, state)
    elif current_state == AppStates.ADD_CAT.state:
        await update_or_send_interface_message(bot_obj, chat_id, state, "üîπ –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:", type_kb())
        await state.set_state(AppStates.ADD_TYPE)
    elif current_state == AppStates.ADD_DESC.state:
        await update_or_send_interface_message(bot_obj, chat_id, state, "üóÇÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", categories_kb(is_post_creation=True))
        await state.set_state(AppStates.ADD_CAT)
    elif current_state == AppStates.ADD_CONT.state:
        await update_or_send_interface_message(bot_obj, chat_id, state, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–¥–æ 500 —Å–∏–º–≤–æ–ª—ñ–≤):", back_kb())
        await state.set_state(AppStates.ADD_DESC)
    elif current_state == AppStates.ADD_CONFIRM.state:
        await update_or_send_interface_message(bot_obj, chat_id, state, "üìû –í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ):", contact_kb())
        await state.set_state(AppStates.ADD_CONT)
    elif current_state == AppStates.VIEW_CAT.state:
        await go_to_main_menu(bot_obj, chat_id, state)
    elif current_state == AppStates.VIEW_LISTING.state:
        await update_or_send_interface_message(bot_obj, chat_id, state, "üîé –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", categories_kb(is_post_creation=False))
        await state.set_state(AppStates.VIEW_CAT)
    elif current_state == AppStates.MY_POSTS_VIEW.state:
        await go_to_main_menu(bot_obj, chat_id, state) 
    elif current_state == AppStates.EDIT_DESC.state:
        data = await state.get_data()
        await show_my_posts_page(bot_obj, chat_id, state, data.get('offset', 0))
        await state.set_state(AppStates.MY_POSTS_VIEW)
    else:
        await go_to_main_menu(bot_obj, chat_id, state)

# ======== –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å ========
@dp.callback_query_handler(lambda c: c.data == 'add_post', state="*")
async def add_start(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} initiated 'Add Post'.")
    await call.answer()
    await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, "üîπ –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:", type_kb())
    await state.set_state(AppStates.ADD_TYPE)

@dp.callback_query_handler(lambda c: c.data.startswith('type_'), state=AppStates.ADD_TYPE)
async def add_type(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} selected post type: {call.data}.")
    await call.answer()
    typ = '—Ä–æ–±–æ—Ç–∞' if call.data == 'type_work' else '–ø–æ—Å–ª—É–≥–∞'
    await state.update_data(type=typ)
    await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, "üóÇÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", categories_kb(is_post_creation=True))
    await state.set_state(AppStates.ADD_CAT)

@dp.callback_query_handler(lambda c: c.data.startswith('post_cat_'), state=AppStates.ADD_CAT)
async def add_cat(call: CallbackQuery, state: FSMContext):
    idx = int(call.data.split('_')[2])
    _, cat = CATEGORIES[idx]
    logging.info(f"User {call.from_user.id} selected category: {cat}.")
    await call.answer()
    await state.update_data(category=cat)
    await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–¥–æ 500 —Å–∏–º–≤–æ–ª—ñ–≤):", back_kb())
    await state.set_state(AppStates.ADD_DESC)

@dp.message_handler(state=AppStates.ADD_DESC)
async def add_desc(msg: types.Message, state: FSMContext):
    logging.info(f"User {msg.from_user.id} entered description.")
    text = msg.text.strip()
    
    try:
        await msg.delete()
    except MessageToDeleteNotFound:
        pass

    if not text:
        return await update_or_send_interface_message(msg.bot, msg.chat.id, state, "‚ùå –û–ø–∏—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º\\. –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–¥–æ 500 —Å–∏–º–≤–æ–ª—ñ–≤):", back_kb(), parse_mode='MarkdownV2')
    if len(text) > 500:
        return await update_or_send_interface_message(msg.bot, msg.chat.id, state, f"‚ùå –ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π \\({len(text)}/500\\)\\.", back_kb(), parse_mode='MarkdownV2')
    
    await state.update_data(desc=text)
    await update_or_send_interface_message(msg.bot, msg.chat.id, state, "üìû –í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ):", contact_kb())
    await state.set_state(AppStates.ADD_CONT)

@dp.callback_query_handler(lambda c: c.data == 'skip_cont', state=AppStates.ADD_CONT)
async def skip_cont(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} skipped contact info.")
    await call.answer()
    await state.update_data(cont="")
    data = await state.get_data()
    
    type_emoji = TYPE_EMOJIS.get(data['type'], '')
    
    summary = (
        f"üîé \\*–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\\*\n"
        f"{escape_markdown_v2(type_emoji)} **{escape_markdown_v2(data['type'].capitalize())}** \\| **{escape_markdown_v2(data['category'])}**\n"
        f"üîπ {escape_markdown_v2(data['desc'])}\n"
        f"üìû \\_–Ω–µ–º–∞—î\\_"
    )
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_add_post"),
    )
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_prev_step"))
    await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, summary, kb, parse_mode='MarkdownV2')
    await state.set_state(AppStates.ADD_CONFIRM)

@dp.message_handler(state=AppStates.ADD_CONT)
async def add_cont(msg: types.Message, state: FSMContext):
    logging.info(f"User {msg.from_user.id} entered contact info.")
    text = msg.text.strip()
    
    try:
        await msg.delete()
    except MessageToDeleteNotFound:
        pass

    if not text:
        return await update_or_send_interface_message(msg.bot, msg.chat.id, state, "‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º\\. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å\\.", contact_kb(), parse_mode='MarkdownV2')
    
    phone_pattern_regex = r'^(?:0\d{9}|\+380\d{9}|@[a-zA-Z0-9_]{5,32})$'

    if not re.fullmatch(phone_pattern_regex, text):
        logging.warning(f"User {msg.from_user.id} entered invalid contact format: '{text}'")
        return await update_or_send_interface_message(
            msg.bot, msg.chat.id, state,
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç\\. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ \\+380XXXXXXXXX –∞–±–æ 0XXXXXXXXX, –∞–±–æ username Telegram \\(@username\\)\\.",
            contact_kb(), parse_mode='MarkdownV2'
        )
    
    await state.update_data(cont=text)
    data = await state.get_data()
    
    type_emoji = TYPE_EMOJIS.get(data['type'], '')

    summary = (
        f"üîé \\*–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\\*\n"
        f"{escape_markdown_v2(type_emoji)} **{escape_markdown_v2(data['type'].capitalize())}** \\| **{escape_markdown_v2(data['category'])}**\n"
        f"üîπ {escape_markdown_v2(data['desc'])}\n"
        f"üìû {escape_markdown_v2(data['cont'])}"
    )
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_add_post"),
    )
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_prev_step"))
    await update_or_send_interface_message(msg.bot, msg.chat.id, state, summary, kb, parse_mode='MarkdownV2')
    await state.set_state(AppStates.ADD_CONFIRM)

@dp.callback_query_handler(lambda c: c.data == 'confirm_add_post', state=AppStates.ADD_CONFIRM)
async def add_confirm(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} confirmed post creation.")
    await call.answer()
    d = await state.get_data()
    
    contact_info = d.get('cont', "")
    if contact_info:
        phone_pattern_regex = r'^(?:0\d{9}|\+380\d{9}|@[a-zA-Z0-9_]{5,32})$'
        if not re.fullmatch(phone_pattern_regex, contact_info):
            logging.error(f"Invalid contact format somehow slipped through for user {call.from_user.id}: {contact_info}")
            await update_or_send_interface_message(
                call.message.bot, call.message.chat.id, state,
                "‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç—É\\. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.",
                main_kb(), parse_mode='MarkdownV2'
            )
            await state.set_state(AppStates.MAIN_MENU)
            return

    post_id = await get_next_sequence_value(db, 'postid')

    post_data = {
        'id': post_id,
        'user_id': call.from_user.id,
        'username': call.from_user.username or str(call.from_user.id),
        'type': d['type'],
        'category': d['category'],
        'description': d['desc'],
        'contacts': contact_info,
        'created_at': datetime.utcnow()
    }
    
    try:
        await db.posts.insert_one(post_data)
        logging.info(f"Added post {post_id} to MongoDB for user {call.from_user.id}")
    except Exception as e:
        logging.error(f"Failed to save post to MongoDB: {e}", exc_info=True)
        await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, "‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.", main_kb(), parse_mode='MarkdownV2')
        await state.set_state(AppStates.MAIN_MENU)
        return

    await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, "‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ\\!", parse_mode='MarkdownV2') 
    await show_my_posts_page(call.message.bot, call.message.chat.id, state, 0)
    await state.set_state(AppStates.MY_POSTS_VIEW)


# ======== –ü–µ—Ä–µ–≥–ª—è–¥ –æ–≥–æ–ª–æ—à–µ–Ω—å (–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó) ========
@dp.callback_query_handler(lambda c: c.data == 'view_posts', state="*")
async def view_start(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} initiated 'View Posts'.")
    await call.answer()
    await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, "üîé –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", categories_kb(is_post_creation=False))
    await state.set_state(AppStates.VIEW_CAT)

@dp.callback_query_handler(lambda c: c.data.startswith('view_cat_'), state=AppStates.VIEW_CAT)
async def view_cat(call: CallbackQuery, state: FSMContext):
    idx = int(call.data.split('_')[2])
    cat_name = CATEGORIES[idx][1]
    logging.info(f"User {call.from_user.id} selected view category: {cat_name}.")
    await call.answer()
    
    await state.update_data(current_view_category=cat_name, current_category_idx=idx)
    await show_view_posts_page(call.message.bot, call.message.chat.id, state, 0)
    await state.set_state(AppStates.VIEW_LISTING)
    
@dp.callback_query_handler(lambda c: c.data.startswith('viewpage_'), state=AppStates.VIEW_LISTING)
async def view_paginate(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} paginating view posts to offset {call.data.split('_')[1]}.")
    await call.answer()
    offset = int(call.data.split('_')[1])
    await show_view_posts_page(call.message.bot, call.message.chat.id, state, offset)


# ======== –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ========
@dp.callback_query_handler(lambda c: c.data=='my_posts', state="*")
async def my_posts_start(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} pressed 'My Posts'.")
    await call.answer()
    await show_my_posts_page(call.message.bot, call.message.chat.id, state, 0)
    await state.set_state(AppStates.MY_POSTS_VIEW)

@dp.callback_query_handler(lambda c: c.data.startswith('mypage_'), state=AppStates.MY_POSTS_VIEW)
async def my_posts_paginate(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} paginating my posts to offset {call.data.split('_')[1]}.")
    await call.answer()
    offset = int(call.data.split('_')[1])
    await show_my_posts_page(call.message.bot, call.message.chat.id, state, offset)


# ======== –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ========
@dp.callback_query_handler(lambda c: c.data.startswith('edit_'), state=AppStates.MY_POSTS_VIEW)
async def edit_start(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} initiated edit for post {call.data.split('_')[1]}.")
    await call.answer()
    pid = int(call.data.split('_')[1])
    
    post = await db.posts.find_one({'id': pid, 'user_id': call.from_user.id})
    
    if not post or not can_edit(post):
        logging.warning(f"User {call.from_user.id} tried to edit expired or non-existent/unauthorized post {pid}.")
        await call.answer("‚è∞ –ß–∞—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (15 —Ö–≤) –≤–∏—á–µ—Ä–ø–∞–Ω–æ, –∞–±–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ/–Ω–∞–ª–µ–∂–∏—Ç—å —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.\\.", show_alert=True) 
        return
        
    await state.update_data(edit_pid=pid)
    
    await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å (–¥–æ 500 —Å–∏–º–≤–æ–ª—ñ–≤):", back_kb())
    await state.set_state(AppStates.EDIT_DESC)

@dp.message_handler(state=AppStates.EDIT_DESC)
async def process_edit(msg: types.Message, state: FSMContext):
    logging.info(f"User {msg.from_user.id} submitting new description for edit.")
    text = msg.text.strip()
    
    try:
        await msg.delete()
    except MessageToDeleteNotFound:
        pass

    if not text or len(text) > 500:
        return await update_or_send_interface_message(msg.bot, msg.chat.id, state, f"‚ùå –ù–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∏–π –æ–ø–∏—Å \\(1\\-500 —Å–∏–º–≤–æ–ª—ñ–≤\\)\\.", back_kb(), parse_mode='MarkdownV2') 
        
    data = await state.get_data()
    pid = data['edit_pid']
    
    try:
        result = await db.posts.update_one(
            {'id': pid, 'user_id': msg.from_user.id}, 
            {'$set': {'description': text}}
        )
        if result.matched_count == 0:
            logging.warning(f"No post found to update for user {msg.from_user.id}, post {pid}")
            await update_or_send_interface_message(msg.bot, msg.chat.id, state, "‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –π–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è\\.", main_kb(), parse_mode='MarkdownV2')
            await state.set_state(AppStates.MAIN_MENU)
            return
        logging.info(f"Edited post {pid} in MongoDB for user {msg.from_user.id}")
    except Exception as e:
        logging.error(f"Failed to update post in MongoDB: {e}", exc_info=True)
        await update_or_send_interface_message(msg.bot, msg.chat.id, state, "‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–ø–∏—Å—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.", main_kb(), parse_mode='MarkdownV2')
        await state.set_state(AppStates.MAIN_MENU)
        return

    await update_or_send_interface_message(msg.bot, msg.chat.id, state, "‚úÖ –û–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ\\!", parse_mode='MarkdownV2')
    await show_my_posts_page(msg.bot, msg.chat.id, state, data.get('offset', 0))
    await state.set_state(AppStates.MY_POSTS_VIEW)


# ======== –í–∏–¥–∞–ª–µ–Ω–Ω—è ========
@dp.callback_query_handler(lambda c: c.data.startswith('delete_'), state=AppStates.MY_POSTS_VIEW)
async def delete_post(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} initiating delete for post {call.data.split('_')[1]}.")
    
    pid = int(call.data.split('_')[1])
    
    try:
        result = await db.posts.delete_one({'id': pid, 'user_id': call.from_user.id})
        
        if result.deleted_count == 0:
            logging.warning(f"User {call.from_user.id} tried to delete non-existent or unauthorized post {pid}.")
            await call.answer("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –π–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True)
            await show_my_posts_page(call.message.bot, call.message.chat.id, state, (await state.get_data()).get('offset', 0))
            return

        logging.info(f"Deleted post {pid} from MongoDB for user {call.from_user.id}")
        await call.answer("‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.", show_alert=True)
    except Exception as e:
        logging.error(f"Failed to delete post from MongoDB: {e}", exc_info=True)
        await call.answer("‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.", show_alert=True)
        await show_my_posts_page(call.message.bot, call.message.chat.id, state, (await state.get_data()).get('offset', 0))
        return
    
    data = await state.get_data()
    current_offset = data.get('offset', 0)
    
    total_user_posts_after_delete = await db.posts.count_documents({'user_id': call.from_user.id})
    
    new_offset = current_offset
    
    if new_offset >= total_user_posts_after_delete and new_offset > 0:
        new_offset = max(0, new_offset - MY_POSTS_PER_PAGE)
    
    await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, "üóëÔ∏è –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ\\!", parse_mode='MarkdownV2')
    await show_my_posts_page(call.message.bot, call.message.chat.id, state, new_offset)
    await state.set_state(AppStates.MY_POSTS_VIEW)


# ======== –î–æ–ø–æ–º–æ–≥–∞ ========
@dp.callback_query_handler(lambda c: c.data=='help', state="*")
async def help_handler(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} requested help.")
    await call.answer()
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ @VILARSO18", url="https://t.me/VILARSO18"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_main_menu"))
    await update_or_send_interface_message(call.message.bot, call.message.chat.id, state, "üí¨ –î–ª—è —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ –∞–±–æ –¥–æ–ø–æ–º–æ–≥–∏ –ø–∏—à—ñ—Ç—å \\@VILARSO18", kb, parse_mode='MarkdownV2') 
    await state.set_state(AppStates.MAIN_MENU) 

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö callback_data —Ç–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∫–∏–Ω—É—Ç–æ–≥–æ —Å—Ç–∞–Ω—É
# –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ –º–∞—î –±—É—Ç–∏ –ü–Ü–°–õ–Ø –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö callback_query_handler-—ñ–≤
@dp.callback_query_handler(state="*")
async def debug_all_callbacks(call: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"DEBUG: Unhandled callback_data received: {call.data} from user {call.from_user.id} in state {current_state}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ None (—Å–µ—Å—ñ—è —Å–∫–∏–Ω—É—Ç–∞)
    if current_state is None:
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ —Å—Ç–∞—Ä–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        try:
            await call.message.delete()
            logging.info(f"Deleted old message {call.message.message_id} for user {call.from_user.id} due to session reset.")
        except MessageToDeleteNotFound:
            logging.warning(f"Message {call.message.message_id} not found to delete for user {call.from_user.id}.")
        except Exception as e:
            logging.error(f"Error deleting message {call.message.message_id} for user {call.from_user.id}: {e}", exc_info=True)

        await call.answer("–í–∞—à–∞ —Å–µ—Å—ñ—è –±—É–ª–∞ —Å–∫–∏–Ω—É—Ç–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", show_alert=True)
        await go_to_main_menu(call.message.bot, call.message.chat.id, state)
        return # –í–∞–∂–ª–∏–≤–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏

    await call.answer() # –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback_query, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ "–∫—Ä—É—Ç—è—á–æ–≥–æ—Å—è –≥–æ–¥–∏–Ω–Ω–∏–∫–∞"

# ======== –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–º–∏–ª–æ–∫ ========
@dp.errors_handler()
async def err_handler(update: types.Update, exception):
    logging.error(f"Update: {update} caused error: {exception}", exc_info=True)
    
    chat_id = None
    bot_obj = None
    if update.callback_query and update.callback_query.message:
        chat_id = update.callback_query.message.chat.id
        bot_obj = update.callback_query.message.bot
    elif update.message:
        chat_id = update.message.chat.id
        bot_obj = update.message.bot

    if chat_id and bot_obj:
        if isinstance(exception, (BadRequest, TelegramAPIError)):
            if "Can't parse entities" in str(exception):
                logging.error("Markdown parse error detected. Ensure all user-supplied text is escaped.")
                await update_or_send_interface_message(bot_obj, chat_id, dp.current_state(), "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Ç–µ–∫—Å—Ç—É\\. –ú–æ–∂–ª–∏–≤–æ, –≤ –æ–ø–∏—Å—ñ —î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Å–∏–º–≤–æ–ª–∏\\.", main_kb(), parse_mode='MarkdownV2')
                await dp.current_state().set_state(AppStates.MAIN_MENU)
                return True
            elif "Text must be non-empty" in str(exception):
                logging.error("Message text is empty error detected.")
                await update_or_send_interface_message(bot_obj, chat_id, dp.current_state(), "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.", main_kb())
                await dp.current_state().set_state(AppStates.MAIN_MENU)
                return True
            elif "message is not modified" in str(exception): 
                logging.info("Message was not modified, skipping update.")
                return True 
            elif "Too Many Requests: retry after" in str(exception):
                retry_after = int(re.search(r'retry after (\d+)', str(exception)).group(1))
                logging.warning(f"FloodWait for {retry_after} seconds for chat {chat_id}")
                await update_or_send_interface_message(bot_obj, chat_id, dp.current_state(), f"–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤\\. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ {retry_after} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –¥—ñ—î—é\\.", main_kb(), parse_mode='MarkdownV2')
                await dp.current_state().set_state(AppStates.MAIN_MENU)
                return True
        elif isinstance(exception, MessageNotModified):
            logging.info("Message was not modified, skipping update.")
            return True
        elif isinstance(exception, MessageToDeleteNotFound):
            logging.info("Message to delete not found, skipping.")
            return True

    logging.critical(f"Unhandled error: {exception}", exc_info=True)
    if chat_id and bot_obj:
        await update_or_send_interface_message(bot_obj, chat_id, dp.current_state(), "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\.", main_kb())
        await dp.current_state().set_state(AppStates.MAIN_MENU)
    return True

async def on_startup(dp_obj):
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await init_db_connection()

    WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
    
    # –Ø–≤–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ
    try:
        await bot.delete_webhook()
        logging.info("–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ–±—Ö—É–∫ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ–±—Ö—É–∫ (–º–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –Ω–µ –±—É–ª–æ): {e}")
    
    # –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –ø–∞—É–∑—É
    await asyncio.sleep(1)

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π –≤–µ–±—Ö—É–∫, —Å–∫–∏–¥–∞—é—á–∏ –≤—Å—ñ –æ—á—ñ–∫—É—é—á—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    logging.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤–µ–±—Ö—É–∫–∞ –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
    try:
        webhook_info = await bot.get_webhook_info()
        logging.info(f"DEBUG: Webhook info after setup: {webhook_info}")
    except Exception as e:
        logging.error(f"DEBUG: Failed to get webhook info after setup: {e}", exc_info=True)


async def on_shutdown(dp_obj):
    logging.info("–í–∏–º–∫–Ω–µ–Ω–Ω—è –±–æ—Ç–∞...")
    await bot.delete_webhook()
    logging.info("–í–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    global db_client
    if db_client:
        db_client.close()
        logging.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB –∑–∞–∫—Ä–∏—Ç–æ.")

if __name__ == '__main__':
    logging.info("Starting webhook...")
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
